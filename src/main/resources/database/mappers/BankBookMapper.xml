<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.iu.main.bankBook.BankBookDAO">
  
  	<!-- SQL 조각 -->
	<sql id="searchSQL">
		WHERE bookNum > 0
		AND
		<!--
			AND #{kind} LIKE '%' || #{keyword} || '%'  →  오류
			Database에서 사용되는 예약어(컬럼명, 테이블명 등)는 #{...}으로 대체할 수 없다.
			그러므로 아래와 같이 동적 쿼리를 사용해야 한다.
		-->
		<choose>
			<when test="kind == 'name'"> <!-- #{kind} 오류  →  #{ } 생략 -->
				BOOKNAME LIKE '%' || #{keyword} || '%' <!-- '%#{keyword}%'  →  오류 : '%서동휘%'이 아닌 '%'서동휘'%'으로 인식됨 -->
			</when>
			<when test="kind == 'contents'">
				BOOKCONTENTS LIKE '%' || #{keyword} || '%'
			</when>
			<otherwise>
				BOOKNUM IS NOT NULL	
			</otherwise>
		<!-- 
			<otherwise>
					bookContents LIKE '%' || #{keyword} || '%'
		 	</otherwise>
		 -->
		 	
		<!-- 
			<if test="kind == 'name'">
				AND booName LIKE '%#{keyword}%'
			</if>
			<if test="kind == 'contents'">
				AND bookContents LIKE '%#{keyword}%'
			</if>
		-->
		</choose> 
		
	</sql>
  
  
  	<select id="getTotal" resultType="Long">
  		SELECT COUNT(BOOKNUM) FROM BANKBOOK
  		<include refid="searchSQL" />
  	</select>
  	
  	<select id="getList" resultType="BankBookDTO" parameterType="com.iu.main.util.Pager">
  		SELECT BOOKNUM, BOOKNAME, BOOKRATE
		FROM
			(SELECT ROWNUM R ,B.* 
	   		 FROM
				(
				SELECT * FROM BANKBOOK
				<include refid="searchSQL" />
					  <!-- 
						  <if test="kind == 'name'">
						   AND	BOOKNAME LIKE '%검색어%' 
						  </if>
						  <if test="kind == 'contents'">
						  	AND	BOOKCONTENTS LIKE '%검색어%' 
						  </if> -->
				ORDER BY BOOKNUM DESC 
				) B 
			) 
		WHERE R BETWEEN #{startRow} AND #{lastRow}
  	</select>
  	
  	<select id="getDetail" resultMap="getDetailResult" parameterType="BankBookDTO">
		SELECT B.*,BF.*
		FROM BANKBOOK B
			LEFT OUTER JOIN BANKFILE BF
			ON B.BOOKNUM = BF.BOOKNUM
		WHERE B.BOOKNUM=#{bookNum}
	
  	</select>
  	<resultMap type="BankBookDTO" id="getDetailResult">
  		<id column="BOOKNUM" property="bookNum" />
  		<result column="BOOKNAME" property="bookName"/>
  		<result column="BOOKCONTENTS" property="bookContents"/>
  		<result column="BOOKRATE" property="bookRate"/>
  		<result column="BOOKSALE" property="bookSale"/>
  		<collection property="bankFileDTOs" javaType="List" ofType="BankFileDTO">
  			<id column="FILENUM" property="fileNum"/>
  			<result column="FILENAME" property="fileName"/>
  			<result column="ORIGINALNAME" property="originalName"/>
  		</collection>
  		
  	</resultMap>
  	
  	<select id="getSequence" resultType="Long">
  		SELECT BANK_SEQ.NEXTVAL FROM DUAL
  	</select>
  	
  	<insert id="setAdd" parameterType="BankBookDTO"> 
  		<selectKey keyProperty="bookNum" resultType="Long" order="BEFORE">
  			SELECT BANK_SEQ.NEXTVAL FROM DUAL
  		</selectKey>
  		INSERT INTO BANKBOOK VALUES(#{bookNum},#{bookName},#{bookRate},#{bookSale},#{bookContents})
  	</insert>
  	
  	<insert id="setFileAdd" parameterType="BankFileDTO">
  		INSERT INTO BANKFILE VALUES(BANKFILE_SEQ.NEXTVAL,#{bookNum},#{originalName},#{fileName})
  	</insert> 
  	
  	<update id="setUpdate" parameterType="BankBookDTO">
		UPDATE BANKBOOK SET BOOKNAME=#{bookName}, BOOKRATE=#{bookRate}, BOOKSALE=#{bookSale}, BOOKCONTENTS=#{bookContents} WHERE BOOKNUM=#{bookNum}  	
  	</update>
  	
  	<delete id="setDelete" parameterType="Long">
  		DELETE BANKBOOK WHERE BOOKNUM=#{num}
  	</delete>
  	
  	
  	
  </mapper>